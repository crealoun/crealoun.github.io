#canvas-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 4;
}

#home-background {
    position: fixed;
    width: 100vw;
    height: 100vh;
    left: 0px;
    top: 0px;
    overflow: hidden;
    pointer-events: none;
    background-size: cover;
    background-position: bottom center;
}

#home-logo-container {
    width: 100vw;
    height: 100%;
    min-height: 100vh;
    max-width: 1000px;
    margin: 0 auto;
    margin-top: 5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    z-index: 20;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
    -webkit-user-drag: none;
    -webkit-touch-callout: none;
    color: #57508d;
}

#home-logo {
    position: relative;
    width: clamp(200px, 70vw, 550px);
    top: 20px;
    opacity: 0.9;
}
.home-logo-text {
    padding: 0 1rem 1rem 1rem;
    position: relative;
    font-family: "Gloria Hallelujah";
    font-size: 1rem;
}

@media (min-width: 768px) {
    .home-logo-text {
        padding: 0;
        font-size: 1.3rem;
    }
}

.home-logo-text p {
    line-height: 0.1rem;
}

:root {
    /* The intrinsic width of the underline stroke (in pixels). This is 
     * the same as the height of the cap images. Don't specify the
     * units! This is because of some of the calculations we do later on. */
    --underline-intrinsic-width: 8;
    
    /* The actual width of the underline stroke we want to render (in pixels).
     * You can modify this, and the sizing and positioning should be calculated
     * accordingly. Again, Don't specify the units! */
    --underline-width: 30;
    
    /* The colour used to draw the underline. It should match the colour
     * used in the cap images... unfortunately we can't modify the SVG
     * fill via CSS because it's a background image. */
    --underline-color: #ffffff;
    
    /* We need to know the width of the cap images so that we
     * can position everything on the x axis accordingly. */
    --underline-cap-width: 4px;
    
    /* The border is positioned relative to the bottom of the line.
     * We can move it upwards a little to create an overlap effect. */
    --underline-offset-y: -2px;
    
    /* The padding to add to the x axis. By default, the caps would be
     * aligned with the beginning and end of the line. */
    --underline-padding-x: 0.12em;
    
    /* The cap images to use that form the left and right rounded
     * shape. I guess these could be any shape, they don't
     * necessarily have to be round ðŸ™‚.
     */
    --cap-image-left: url(https://files-d4s40otz1.now.sh/left.svg);
    --cap-image-right: url(https://files-4vvqilj8v.now.sh/right.svg);
  }

.underline {
    display: inline;
    --underline-width-scale: calc(var(--underline-width) / var(--underline-intrinsic-width));
    /* padding: 0 calc(var(--underline-padding-x) + calc(var(--underline-cap-width) * var(--underline-width-scale))); */
    box-decoration-break: clone;
    /* background-repeat: no-repeat; */
    background-repeat: repeat-x;
    color: var(--underline-text-color);
    background-image:
      linear-gradient(180deg, var(--underline-color), var(--underline-color));
    background-position-x:
      calc(var(--underline-cap-width) * var(--underline-width-scale)),
      0,
      100%;
    background-position-y: calc(100% - var(--underline-offset-y) * -1);
    background-size:
      calc(100% - calc(var(--underline-cap-width) * var(--underline-width-scale) * 2)) calc(var(--underline-width) * 1px),
      auto calc(var(--underline-width) * 1px),
      auto calc(var(--underline-width) * 1px);
  }